/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package lv.lumii.pixelmaster.modules.recognition.domain;

import lv.lumii.pixelmaster.modules.recognition.domain.CharacterInfo;
import lv.lumii.pixelmaster.modules.recognition.domain.FindVectors;
import junit.framework.TestCase;
import lv.lumii.pixelmaster.core.api.domain.RasterImage;

/**
 *
 * @author Sandra Rivare
 * @since 16.04.2009
 */
public class FindVectorsTest extends TestCase {
    
    public FindVectorsTest(String testName) {
        super(testName);
    }

    /**
     * Test of findVectorLength method, of class FindVectors.
     */
    /*public void testFindVectorLength() {
        System.out.println("Recognition: findVectorLength{}");
        RasterImage rImage = null;
        rImage.height = 50;
        rImage.width = 50;
        CharacterInfo table = null;
        CharacterInfo expResult = null;
        CharacterInfo result = FindVectors.findVectorLength(rImage, table);
        assertEquals(expResult, result);
    }*/

    /**
     * Test of findCenter method, of class FindVectors.
     */
    public void testFindVectorLength() {
        System.out.println("Recognition.FindVectors: findCenter");
        RasterImage rImage = new RasterImage(20,21);
        CharacterInfo table = new CharacterInfo();

        int pixels[] = {16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,0,0,0,
                        0,0,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,0,0,0,
                        0,0,0,0,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,0,0,0,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,0,0,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,0,16777215,16777215,16777215,
                        16777215,16777215,16777215,0,0,0,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,0,16777215,16777215,
                        16777215,0,0,0,0,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,0,0,0,0,0,
                        0,0,0,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,
                        16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215};
        
        for(int i=0;i<420;i++){
            int x = i%20;
            int y = i/20;
            rImage.setRGB(x, y, pixels[i]);
        }

        CharacterInfo result = FindVectors.findVectorLength(rImage, table);
         assertEquals(result.V1, 4);
         assertEquals(result.V2, 7);
         assertEquals(result.V3, 6);
         assertEquals(result.V4, 6 );
         assertEquals(result.V5, 7 );
         assertEquals(result.V6, 6 );
         assertEquals(result.V7, 5 );
         assertEquals(result.V8, 5 );
         assertEquals(result.VV1, 5);
         assertEquals(result.VV2, 7);
         assertEquals(result.VV3, 6);
         assertEquals(result.VV4, 6);
         assertEquals(result.VV5, 6);
         assertEquals(result.VV6, 6 );
         assertEquals(result.VV7, 8);
         assertEquals(result.VV8, 5);
         assertEquals(result.fromCenterV1, 4);
         assertEquals(result.fromCenterV2, 6 );
         assertEquals(result.fromCenterV3, 5 );
         assertEquals(result.fromCenterV4, 6);
        //assertEquals(expResult.centerY, result.centerY);
        //assertEquals(expResult.centerX, result.centerX);
    }
}
