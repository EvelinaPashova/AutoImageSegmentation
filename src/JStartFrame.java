
//import static JMainFrame.jProgressBar;
import com.binary.algorithm.*;
//import static com.binary.algorithm.Binarize.original;
import java.awt.Color;
import java.io.File;
//import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
//import java.util.NoSuchElementException;
//import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
//import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ASUS
 */
public class JStartFrame extends javax.swing.JFrame {

    /**
     * Creates new form JSecondaryFrame
     */
    public JStartFrame()   {
        setDefaultCloseOperation(JStartFrame.EXIT_ON_CLOSE);
        initComponents();
        choiceA.add("RGB to HSI mode 0");
        choiceA.add("RGB to HSI mode 1");
        choiceA.add("RGB to HSI mode 2");
        choice1.add("2");
        choice1.add("3");
        choice1.add("4");
        choice1.add("5");
      } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        probiC = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        count_bmpTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDir = new javax.swing.JTextField();
        choiceA = new java.awt.Choice();
        jLabel2 = new javax.swing.JLabel();
        RGB_B = new javax.swing.JRadioButton();
        HalfT = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        choice1 = new java.awt.Choice();
        fon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cut surface evaluation of white brined cheese in HSI");
        setLocation(new java.awt.Point(500, 200));
        setMinimumSize(new java.awt.Dimension(430, 158));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Images Count");
        jLabel1.setMaximumSize(new java.awt.Dimension(80, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(80, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 14));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 90, 14);

        probiC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(probiC);
        probiC.setBounds(110, 10, 40, 21);

        jButton2.setText("Choose DIR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(180, 10, 89, 20);

        count_bmpTxt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        count_bmpTxt.setEnabled(false);
        getContentPane().add(count_bmpTxt);
        count_bmpTxt.setBounds(370, 8, 46, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Finished");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(310, 10, 50, 14);

        txtDir.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDir.setEnabled(false);
        getContentPane().add(txtDir);
        txtDir.setBounds(10, 100, 406, 20);
        getContentPane().add(choiceA);
        choiceA.setBounds(80, 40, 170, 20);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Result image");
        jLabel2.setToolTipText("");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(290, 40, 90, 20);

        buttonGroup1.add(RGB_B);
        RGB_B.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RGB_B.setText("RGB");
        RGB_B.setActionCommand("RGB_Butt");
        RGB_B.setOpaque(false);
        getContentPane().add(RGB_B);
        RGB_B.setBounds(350, 70, 70, 23);

        buttonGroup1.add(HalfT);
        HalfT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        HalfT.setOpaque(false);
        HalfT.setText("Grayscale");
        getContentPane().add(HalfT);
        HalfT.setBounds(250, 70, 90, 23);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Segment");
        jLabel3.setToolTipText("");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 70, 60, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Algorithm");
        jLabel5.setToolTipText("");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 42, 70, 15);
        getContentPane().add(choice1);
        choice1.setBounds(80, 70, 90, 20);

        fon.setBackground(new java.awt.Color(255, 255, 255));
        fon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/443_70%opacity.jpg"))); // NOI18N
        fon.setName(""); // NOI18N
        getContentPane().add(fon);
        fon.setBounds(0, 0, 430, 150);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public static float kDiv[] = null;
    public static float kDivBlack[] = null;
    public static float kDivGrayLow[] = null;
    public static float kDivGrayHigh[] = null;
    public static float kDivGray[] = null;
    public static float kDivYellow[] = null;
    public static float kDivGreen[] = null;
    public static float kDivRed[] = null;
    public static float kDivBlue[] = null;
    public static float kDivOrange[] = null;
    private JFileChooser chooser;
    
   

   
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            
        if (HalfT.isSelected()) {
            
            JMainFrame.green.setEnabled(false);
            JMainFrame.green.setText(String.format("  "));
            JMainFrame.Orange.setEnabled(false);
            JMainFrame.Orange.setText(String.format("  "));
            JMainFrame.yellow.setEnabled(false);
            JMainFrame.yellow.setText(String.format("  "));
            JMainFrame.red.setEnabled(false);
            JMainFrame.red.setText(String.format("  "));
            JMainFrame.blue.setEnabled(false);
            JMainFrame.blue.setText(String.format("  ")); 
            JMainFrame.jLabel2.setVisible(false);
                                                        
            JMainFrame.max.setEnabled(true);
            JMainFrame.min.setEnabled(true);
            JMainFrame.avg.setEnabled(true);
            JMainFrame.gray.setEnabled(true);
            JMainFrame.kdiv_proba.setEnabled(true);
            JMainFrame.jLabel1.setVisible(true);  
            }
            else {
             JMainFrame.max.setEnabled(false);
            JMainFrame.max.setText(String.format(" "));
            JMainFrame.min.setEnabled(false);
            JMainFrame.min.setText(String.format(" "));
            JMainFrame.avg.setEnabled(false);
            JMainFrame.avg.setText(String.format(" "));
            JMainFrame.gray.setEnabled(false);
            JMainFrame.gray.setText(String.format(" "));
            JMainFrame.kdiv_proba.setEnabled(false);
            JMainFrame.kdiv_proba.setText(String.format(" "));
            JMainFrame.jLabel1.setVisible(false);
            
            JMainFrame.green.setEnabled(true);
            JMainFrame.Orange.setEnabled(true);
            JMainFrame.yellow.setEnabled(true);
            JMainFrame.red.setEnabled(true);
            JMainFrame.blue.setEnabled(true);
            JMainFrame.jLabel2.setVisible(true); 
            }
              
              try{
            int val=Integer.parseInt(probiC.getText());
            if(val<=0)
            {
                JOptionPane.showMessageDialog(this, "You must enter positive integer bigger than 0 for \'Image count\'!");
                probiC.requestFocus();
                return;
            }
            if (val>=1 && !RGB_B.isSelected() && !HalfT.isSelected()) 
            {
            JOptionPane.showMessageDialog(this, "You must select an \'Result image22111\' type!");
                probiC.requestFocus();
                return;
            }
        }
        catch(NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this, "You must enter positive integer bigger than 0 for \'Image count\'!");
            probiC.requestFocus();
            return;
        }
        
                  
        
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
       
        
        chooser.setAcceptAllFileFilterUsed(false);
        int sucess = chooser.showOpenDialog(jButton2.getParent());
        if (sucess == JFileChooser.APPROVE_OPTION) {
            JMainFrame.jProgressBar.setValue(0);
            JMainFrame.jProgressBar.update(JMainFrame.jProgressBar.getGraphics());
            File folder = chooser.getSelectedFile();
            //directory string
            txtDir.setText(chooser.getSelectedFile().toString());
            txtDir.update(txtDir.getGraphics());
          
            
            String directory;
            directory = chooser.getSelectedFile() + "\\";
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");
            Date date = new Date();
            String bin = chooser.getSelectedFile() + "/bin_" + dateFormat.format(date);
            new File(bin).mkdir();
            
            //list files objects in the directory object
            
            File listOfFiles[] = folder.listFiles();
            kDiv = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivBlack = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivGrayLow = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivGrayHigh = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivGray = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivYellow = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivGreen = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivRed= new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivBlue= new float[Integer.parseInt(JStartFrame.probiC.getText())];
            kDivOrange = new float[Integer.parseInt(JStartFrame.probiC.getText())];
            
            //put all the names of the file objects into myArr
            
            int iFileCount=0;
            for (File listOfFile : listOfFiles) {
                if (listOfFile.isFile()) { 
                    iFileCount++;
                }
            }
            
            int maxCountImg;
            if(iFileCount<Integer.parseInt(JStartFrame.probiC.getText()))
                maxCountImg = iFileCount;
            else
                maxCountImg=Integer.parseInt(JStartFrame.probiC.getText());
            int picStep=(maxCountImg/10<=0?1:maxCountImg/10);
            float onePercent = (float) maxCountImg / 100;
            int percentPlus = (int) ((float) 1 / (float) onePercent);
            
            float maxKDiv = 0.0f;
            float minKDiv = 0.0f;
            float kDivAvg = 0.0f;
            float kDivBlackAvg = 0.0f;
            float kDivGrayLowAvg = 0.0f;
            float kDivGrayHighAvg = 0.0f;
            float kDivGrayAvg = 0.0f;
            float kDivYellowAvg = 0.0f;
            float kDivGreenAvg = 0.0f;
            float kDivRedAvg = 0.0f;
            float kDivBlueAvg = 0.0f;
            float kDivOrangeAvg = 0.0f;
           
                                   
            
            if(maxCountImg<Integer.parseInt(JStartFrame.probiC.getText()))
            {
                JOptionPane.showMessageDialog(this, "All probe is "+ maxCountImg+". Entered number is larger than the existing!");
                   
                JStartFrame.probiC.setText(Integer.toString(maxCountImg));
                JStartFrame.probiC.update(JStartFrame.probiC.getGraphics());
            }
            JMainFrame.kDivProbi.setText(bin+"\n\n");
            int iPics=0;
            for (int i = 0; i < listOfFiles.length; i++) {

                if (listOfFiles[i].isFile()) {
                    File f = listOfFiles[i];
                              
                    String[] fileSplit = f.getName().split("[.]");
                    String ext = fileSplit[fileSplit.length - 1];
                    if (!f.canRead() || !Arrays.asList(Binarize.EXT).contains(ext)) {

                        return;
                    }
                    String outputF = bin.replace("/", "\\") + "\\" + f.getName();
                    String proba=f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("\\")+1);
                    try {
                        int selA=0;
                        selA=(choiceA.getSelectedIndex()==0)?0:choiceA.getSelectedIndex();
                        Binarize.original = ImageIO.read(f);
                        if(choiceA.getSelectedIndex()==0)
                        {
                            
                            HSIPIXEL arr[][]= new HSIPIXEL[Binarize.original.getWidth()][Binarize.original.getHeight()];
                            
                            for(int mHSI1=0; mHSI1<Binarize.original.getWidth(); mHSI1++)
                                for(int mHSI2=0; mHSI2<Binarize.original.getHeight(); mHSI2++)
                                    arr[mHSI1][mHSI2]= new HSIPIXEL();
                            
                            Binarize.RGBtoHSI(Binarize.original.getHeight(), Binarize.original.getWidth(), Binarize.original, arr);
                            
                            if(choice1.getSelectedIndex()== 0 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 1 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 2 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 3 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            
                        }
                        else
                            if(choiceA.getSelectedIndex()==1)
                           
                            {   HSIPIXEL arr[][]= new HSIPIXEL[Binarize.original.getWidth()][Binarize.original.getHeight()];
                            
                            for(int mHSI1=0; mHSI1<Binarize.original.getWidth(); mHSI1++)
                                for(int mHSI2=0; mHSI2<Binarize.original.getHeight(); mHSI2++)
                                    arr[mHSI1][mHSI2]= new HSIPIXEL();
                            
                            Binarize.RGBtoHSI(Binarize.original.getHeight(), Binarize.original.getWidth(), Binarize.original, arr);
                            
                            if(choice1.getSelectedIndex()== 0 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 1 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 2 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            if(choice1.getSelectedIndex()== 3 ){
                                if(HalfT.isSelected())
                                    Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                else
                                    Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                            }
                            }   
                            else
                            {
                                HSIPIXEL arr[][]= new HSIPIXEL[Binarize.original.getWidth()][Binarize.original.getHeight()];
                              
                                for(int mHSI1=0; mHSI1<Binarize.original.getWidth(); mHSI1++)
                                    for(int mHSI2=0; mHSI2<Binarize.original.getHeight(); mHSI2++)
                                        arr[mHSI1][mHSI2]= new HSIPIXEL();                              
                                
                                Binarize.RGBtoHSI(Binarize.original.getHeight(), Binarize.original.getWidth(), Binarize.original, arr);
                                
                                if(choice1.getSelectedIndex()== 0 ){
                                    if(HalfT.isSelected())
                                        Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                    else
                                        Binarize.binarized = Binarize.Multilevel_One_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1); 
                                }
                                if(choice1.getSelectedIndex()== 1 ){
                                    if(HalfT.isSelected())
                                        Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                    else
                                        Binarize.binarized = Binarize.Multilevel_Two_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1); 
                                }
                                if(choice1.getSelectedIndex()== 2 ){
                                    if(HalfT.isSelected())
                                        Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                    else
                                        Binarize.binarized = Binarize.Multilevel_Three_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                                } 
                                if(choice1.getSelectedIndex()== 3 ){
                                    if(HalfT.isSelected())
                                        Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,0);
                                    else
                                        Binarize.binarized = Binarize.Multilevel_Four_Threshold(Binarize.original.getHeight(), Binarize.original.getWidth(), arr,0,1);
                                } 
                            }
                        
                        
                        
                        
                        
                        Binarize.writeImage(outputF);
                        
                        
                        int white = 0,red =0, black=0,grayLow=0,grayHigh=0,gray=0,orange = 0, yellow=0,green=0,blue=0,redC=0; Color RGB;
                        for (int j = 0; j < Binarize.binarized.getWidth(); j++)
                        {
                            for (int k = 0; k < Binarize.binarized.getHeight(); k++) 
                            {
                                
                                if (HalfT.isSelected()){
                                    red = new Color(Binarize.binarized.getRGB(j, k)).getRed();   
                                    switch(red){
                                        case 255:
                                        { white++;
                                        break;}
                                        case 0:
                                        { black++;
                                        break;}
                                        case 190:
                                        { grayLow++;
                                        break;}  //swetlo siwo
                                        case 150:
                                        { grayHigh++;  break;}  //tamno siwo
                                        case 180:
                                        { gray++;  break;}
                                    }
                                }
                                else {
                                    RGB = new Color(Binarize.binarized.getRGB(j, k));
                                    if (Color.BLUE.equals(RGB)) blue++;
                                    else if ( Color.YELLOW.equals(RGB)) yellow++;
                                    else if ( Color.GREEN.equals(RGB)) green++;
                                    else if ( Color.RED.equals(RGB)) redC++;
                                    else if ( Color.ORANGE.equals(RGB)) orange++;
                                }
                            }
                            
                        }
                            
                                              
                                                
                         int max = Binarize.binarized.getWidth() * Binarize.binarized.getHeight();
                        
                        if (HalfT.isSelected()){
                           
                            kDiv[iPics] = (float) ((float) (white) / (float) (max) * 100);
                            kDivBlack[iPics] = (float) ((float) (black) / (float) (max) * 100);
                            kDivGrayLow[iPics] = (float) ((float) (grayLow) / (float) (max) * 100);
                            kDivGrayHigh[iPics] = (float) ((float) (grayHigh) / (float) (max) * 100);
                            kDivGray[iPics] = (float) ((float) (gray) / (float) (max) * 100);
                           kDivAvg += kDiv[iPics];
                           kDivBlackAvg+=kDivBlack[iPics];
                           kDivGrayLowAvg+= kDivGrayLow[iPics];
                           kDivGrayHighAvg+= kDivGrayHigh[iPics];
                           kDivGrayAvg+= kDivGray[iPics];
                        }
                        else {
                           
                            kDivYellow[iPics]=(float) ((float) (yellow) / (float) (max) * 100);
                            kDivGreen[iPics] = (float) ((float) (green) / (float) (max) * 100);
                            kDivRed[iPics] = (float) ((float) (redC) / (float) (max) * 100);
                            kDivBlue[iPics] = (float) ((float) (blue) / (float) (max) * 100);
                            kDivOrange[iPics] = (float) ((float) (orange) / (float) (max) * 100);
                            kDivYellowAvg += kDivYellow[iPics];
                            kDivGreenAvg += kDivGreen[iPics];
                            kDivRedAvg += kDivRed[iPics];
                            kDivBlueAvg += kDivBlue[iPics];
                            kDivOrangeAvg+= kDivOrange[iPics];
                        }
                                                                     
                        String val = JMainFrame.kDivProbi.getText();
                        
                        if ( choice1.getSelectedIndex()==0){
                             if (HalfT.isSelected()) JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Black = "+kDivBlack[iPics]+ "               kDiv Dark Gray = "+kDivGrayHigh[iPics] +"\n\n"); 
                             else JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Orange = "+kDivOrange[iPics]+ "               kDiv  Green = "+kDivGreen[iPics] +"\n\n"); 
                        }
                        
                        if (choice1.getSelectedIndex()==1){
                             if (HalfT.isSelected()) JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Black = "+kDivBlack[iPics]+ "               kDiv Dark Gray = "+kDivGrayHigh[iPics] +"\nkDiv Light Gray = "+kDivGrayLow[iPics]+"\n\n"); 
                             else JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Yellow = "+kDivYellow[iPics]+ "               kDiv  Red = "+kDivRed[iPics] +"\nkDiv  Green = "+kDivGreen[iPics]+"\n\n");
                        }
                       
                            
                        if (choice1.getSelectedIndex()==2){
                              if (HalfT.isSelected()) JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Black = "+kDivBlack[iPics]+ "               kDiv Dark Gray = "+kDivGrayHigh[iPics] +"\nkDiv Light Gray = "+kDivGrayLow[iPics]+ "               kDiv Gray = "+kDivGray[iPics] +"\n\n");
                              else JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Yellow = "+kDivYellow[iPics]+ "               kDiv  Red = "+kDivRed[iPics] +"\nkDiv Green = "+kDivGreen[iPics]+"\nkDiv Blue = "+kDivBlue[iPics]+ "\n\n");   
                        }
                        
                        
                        if(choice1.getSelectedIndex()==3) {
                            if(HalfT.isSelected())   JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Black = "+kDivBlack[iPics]+ "               kDiv Dark Gray = "+kDivGrayHigh[iPics] +"\nkDiv Light Gray = "+kDivGrayLow[iPics]+ "               kDiv Gray = "+kDivGray[iPics] +"\nkDiv White = "+ kDiv[iPics]+"\n\n");
                            else JMainFrame.kDivProbi.setText(val+" name "+proba+"\nkDiv Yellow = "+kDivYellow[iPics]+ "               kDiv  Red = "+kDivRed[iPics] +"\nkDiv Green = "+kDivGreen[iPics]+ "               kDiv Orange = "+kDivOrange[iPics] +"\nkDiv Blue = "+kDivBlue[iPics]+"\n\n");
                        } 
                        
                          if(HalfT.isSelected()){
                                if (minKDiv > kDiv[iPics] || minKDiv == 0.0f)  minKDiv = kDiv[iPics];
                                 if (maxKDiv < kDiv[iPics]) maxKDiv = kDiv[iPics];
                          } 
                          else 
                          {
                                  if(choice1.getSelectedIndex()== 0) 
                                  {
                                     if (minKDiv > kDivGreen[iPics] || minKDiv == 0.0f)  minKDiv = kDivGreen[iPics]; 
                                     if (maxKDiv < kDivGreen[iPics]) maxKDiv = kDivGreen[iPics];
                                  } else 
                                     {
                                         if (minKDiv > kDivYellow[iPics] || minKDiv == 0.0f)  minKDiv = kDivYellow[iPics]; 
                                         if (maxKDiv < kDivYellow[iPics]) maxKDiv = kDivYellow[iPics];
                                     }
                          }
                                                
                    }catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        if((iPics+1)%picStep==0){
                            JMainFrame.jProgressBar.setValue(JMainFrame.jProgressBar.getValue()+picStep*percentPlus);
                            JMainFrame.jProgressBar.update(JMainFrame.jProgressBar.getGraphics());
                            JMainFrame.kDivProbi.update(JMainFrame.kDivProbi.getGraphics());
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this,"Error with progress!!!");
                    }
                    count_bmpTxt.setText(String.valueOf(iPics+1));
                    iPics++;
                    if(iPics==maxCountImg) break;
                }
            }  
            
           
             //float kDiv_proba = kDivAvg - (maxKDiv - minKDiv);
             
           if (HalfT.isSelected()){
               
            System.out.println(kDivAvg);
            System.out.printf("%.7f - (%.7f - %.7f)%n", kDivAvg, maxKDiv, minKDiv); 
            JMainFrame.jProgressBar.setValue(100);
            
            kDivAvg /= (float) kDiv.length;
            kDivBlackAvg /= (float) kDivBlack.length;
            kDivGrayAvg /= (float) kDivGray.length;
            kDivGrayLowAvg /= (float) kDivGrayLow.length;
            kDivGrayHighAvg /= (float) kDivGrayHigh.length;
                                            
            
            if (choice1.getSelectedIndex()==0 ){
            JMainFrame.max.setText(String.format("%.1f", kDivBlackAvg));
            JMainFrame.min.setText(String.format("%.1f", kDivGrayHighAvg));
            JMainFrame.avg.setEnabled(false);
            JMainFrame.avg.setText(String.format(" "));
            JMainFrame.gray.setEnabled(false);
            JMainFrame.gray.setText(String.format(" "));
            JMainFrame.kdiv_proba.setEnabled(false);
            JMainFrame.kdiv_proba.setText(String.format(" "));
            }
            
            if (choice1.getSelectedIndex()==1) {
            JMainFrame.max.setText(String.format("%.1f", kDivBlackAvg));
            JMainFrame.min.setText(String.format("%.1f", kDivGrayHighAvg));
            JMainFrame.avg.setText(String.format("%.1f", kDivGrayLowAvg));
            JMainFrame.gray.setEnabled(false);
            JMainFrame.gray.setText(String.format(" "));
            JMainFrame.kdiv_proba.setEnabled(false);
            JMainFrame.kdiv_proba.setText(String.format(" "));
            } 
            
                if (choice1.getSelectedIndex()==2 ){
            JMainFrame.max.setText(String.format("%.1f", kDivBlackAvg));
            JMainFrame.min.setText(String.format("%.1f", kDivGrayHighAvg));
            JMainFrame.avg.setText(String.format("%.1f", kDivGrayLowAvg));
            JMainFrame.gray.setText(String.format("%.1f", kDivAvg));
            JMainFrame.kdiv_proba.setEnabled(false);
            JMainFrame.kdiv_proba.setText(String.format(" "));}

             if (choice1.getSelectedIndex()==3){
            JMainFrame.max.setText(String.format("%.1f", kDivBlackAvg));
            JMainFrame.min.setText(String.format("%.1f", kDivGrayHighAvg));
            JMainFrame.avg.setText(String.format("%.1f", kDivGrayLowAvg));
            JMainFrame.gray.setText(String.format("%.1f", kDivAvg));
            JMainFrame.kdiv_proba.setText(String.format("%.1f", kDivGrayAvg)); 
            }
            }
            
            if (RGB_B.isSelected()) {
                
            System.out.println(kDivAvg);
            System.out.printf("%.7f - (%.7f - %.7f)%n", kDivAvg, maxKDiv, minKDiv);
            JMainFrame.jProgressBar.setValue(100);

            JMainFrame.jProgressBar.setValue(100);
            kDivYellowAvg /= (float) kDivYellow.length;
            kDivGreenAvg /= (float) kDivGreen.length;
            kDivRedAvg /= (float) kDivRed.length;
            kDivBlueAvg /= (float) kDivBlue.length;
            kDivOrangeAvg/= (float) kDivOrange.length;
                                                 
            if (choice1.getSelectedIndex()==0){
            JMainFrame.green.setText(String.format("%.1f", kDivGreenAvg));
            JMainFrame.Orange.setText(String.format("%.1f", kDivOrangeAvg));
            JMainFrame.yellow.setEnabled(false);
            JMainFrame.yellow.setText(String.format(" "));
            JMainFrame.red.setEnabled(false);
            JMainFrame.red.setText(String.format(" "));
            JMainFrame.blue.setEnabled(false);
            JMainFrame.blue.setText(String.format(" ")); }
            
            if (choice1.getSelectedIndex()==1){
            JMainFrame.green.setText(String.format("%.1f", kDivGreenAvg));
            JMainFrame.red.setText(String.format("%.1f", kDivRedAvg));
            JMainFrame.yellow.setText(String.format("%.1f", kDivYellowAvg));
            JMainFrame.Orange.setEnabled(false);
            JMainFrame.Orange.setText(String.format(" "));
            JMainFrame.blue.setEnabled(false);
            JMainFrame.blue.setText(String.format(" "));}
            
            if (choice1.getSelectedIndex()==2 ){
            JMainFrame.green.setText(String.format("%.1f", kDivGreenAvg));
            JMainFrame.red.setText(String.format("%.1f", kDivRedAvg));
            JMainFrame.yellow.setText(String.format("%.1f", kDivYellowAvg));
            JMainFrame.blue.setText(String.format("%.1f", kDivRedAvg));
            JMainFrame.Orange.setEnabled(false);
            JMainFrame.Orange.setText(String.format(" "));
            }
            if (choice1.getSelectedIndex()== 3 ){
            JMainFrame.yellow.setText(String.format("%.1f", kDivYellowAvg));
            JMainFrame.Orange.setText(String.format("%.1f", kDivOrangeAvg));
            JMainFrame.green.setText(String.format("%.1f", kDivGreenAvg));
            JMainFrame.red.setText(String.format("%.1f", kDivRedAvg));
            JMainFrame.blue.setText(String.format("%.1f", kDivBlueAvg)); 
            }
            }
            
        
            
          
    
            try {
                int ii = kDiv.length - 1;
                File lastFile = listOfFiles[ii];
                String kDivV = String.format("%.1f", kDiv[ii]);
               
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "File not loaded! \n" + ex.getMessage());
            }

             /*File Expert_Data= new File("sirene_expert_data.txt");
            
                    int expNum=0;
                                    
                    Scanner fileReader;  
                    try
                    {
                         float expert[][]=new float[100][2];
                         String str; float x;
                         fileReader= new Scanner(Expert_Data);
                         while (fileReader.hasNextLine()) {
                             str=fileReader.nextLine(); 
                             try
                             {
                                x =Float.parseFloat(str);
                             }
                             catch(NumberFormatException ex)
                             {
                                 x=(float)0.0;
                             }
                            expert[expNum][0]=x;
                            try
                            {
                            str=fileReader.nextLine();
                            }
                            catch(NoSuchElementException xx)
                            {
                                break;
                            }
                            
                             try
                             {
                                x =Float.parseFloat(str);
                             }
                             catch(NumberFormatException ex)
                             {
                                 x=(float)0.0;
                             }
                            expert[expNum][1]=x;
                            //JOptionPane.showMessageDialog(this,"Expert Kdiv="+expert[expNum][0]+", Expert ocenka="+expert[expNum][1]);
                            
                            expNum++;
                         }
                         float substract[]=new float[expNum];
                         for(int i=0;i<expNum;i++)
                             substract[i]=Math.abs(expert[i][0]-kDiv_proba);
                         
                         float min;
                         int i,Imin;
                          min=substract[0];
                          Imin=0;
                            for(i=1;i<expNum;i++)
                            {
                                 if(min>substract[i])
                                   {
                                    min=substract[i]; Imin=i;
                                    }
                            }
                           JOptionPane.showMessageDialog(this,"Expert Ocenka Proba = "+expert[Imin][1]+"  , kDiv_proba = "+kDiv_proba); 
                         
                    }
                    catch(FileNotFoundException ex)
                    {
                   
                        JOptionPane.showMessageDialog(this, "File sirene_expert_data.txt is not found");
                        return;
                    }
                    
                     
                    fileReader.close(); */
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JStartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JStartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JStartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JStartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JStartFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton HalfT;
    private javax.swing.JRadioButton RGB_B;
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Choice choice1;
    private java.awt.Choice choiceA;
    private javax.swing.JTextField count_bmpTxt;
    private javax.swing.JLabel fon;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    static javax.swing.JTextField probiC;
    private javax.swing.JTextField txtDir;
    // End of variables declaration//GEN-END:variables

}
